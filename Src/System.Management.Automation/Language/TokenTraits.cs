using System;

namespace System.Management.Automation.Language
{
	// Token: 0x020005CD RID: 1485
	public static class TokenTraits
	{
		// Token: 0x06003FC7 RID: 16327 RVA: 0x00150CE0 File Offset: 0x0014EEE0
		public static TokenFlags GetTraits(this TokenKind kind)
		{
			return TokenTraits._staticTokenFlags[(int)kind];
		}

		// Token: 0x06003FC8 RID: 16328 RVA: 0x00150CE9 File Offset: 0x0014EEE9
		public static bool HasTrait(this TokenKind kind, TokenFlags flag)
		{
			return (kind.GetTraits() & flag) != TokenFlags.None;
		}

		// Token: 0x06003FC9 RID: 16329 RVA: 0x00150CF9 File Offset: 0x0014EEF9
		internal static int GetBinaryPrecedence(this TokenKind kind)
		{
			return (int)(TokenTraits._staticTokenFlags[(int)kind] & TokenFlags.BinaryPrecedenceRange);
		}

		// Token: 0x06003FCA RID: 16330 RVA: 0x00150D04 File Offset: 0x0014EF04
		public static string Text(this TokenKind kind)
		{
			return TokenTraits._tokenText[(int)kind];
		}

		// Token: 0x0400201F RID: 8223
		private static readonly TokenFlags[] _staticTokenFlags = new TokenFlags[]
		{
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.None,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.ParseModeInvariant,
			TokenFlags.BinaryOperator | TokenFlags.ParseModeInvariant,
			TokenFlags.BinaryOperator | TokenFlags.ParseModeInvariant,
			TokenFlags.SpecialOperator | TokenFlags.ParseModeInvariant,
			TokenFlags.SpecialOperator | TokenFlags.ParseModeInvariant,
			TokenFlags.UnaryOperator | TokenFlags.ParseModeInvariant,
			TokenFlags.UnaryOperator | TokenFlags.DisallowedInRestrictedMode | TokenFlags.PrefixOrPostfixOperator,
			TokenFlags.UnaryOperator | TokenFlags.DisallowedInRestrictedMode | TokenFlags.PrefixOrPostfixOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.SpecialOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.SpecialOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.UnaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.UnaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.UnaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.AssignmentOperator,
			TokenFlags.AssignmentOperator,
			TokenFlags.AssignmentOperator,
			TokenFlags.AssignmentOperator,
			TokenFlags.AssignmentOperator,
			TokenFlags.AssignmentOperator,
			TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.ParseModeInvariant | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryPrecedenceAdd | TokenFlags.BinaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.UnaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.UnaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.UnaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.UnaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CaseSensitiveOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.UnaryOperator | TokenFlags.CaseSensitiveOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.UnaryOperator | TokenFlags.DisallowedInRestrictedMode | TokenFlags.PrefixOrPostfixOperator,
			TokenFlags.UnaryOperator | TokenFlags.DisallowedInRestrictedMode | TokenFlags.PrefixOrPostfixOperator,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.BinaryPrecedenceLogical | TokenFlags.BinaryPrecedenceBitwise | TokenFlags.BinaryOperator | TokenFlags.CanConstantFold,
			TokenFlags.SpecialOperator | TokenFlags.DisallowedInRestrictedMode,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.None,
			TokenFlags.Keyword | TokenFlags.ScriptBlockBlockName,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.ScriptBlockBlockName,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword | TokenFlags.ScriptBlockBlockName,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword | TokenFlags.ScriptBlockBlockName,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword | TokenFlags.StatementDoesntSupportAttributes,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword,
			TokenFlags.Keyword
		};

		// Token: 0x04002020 RID: 8224
		private static readonly string[] _tokenText = new string[]
		{
			"unknown",
			"var",
			"@var",
			"param",
			"number",
			"label",
			"ident",
			"generic",
			"newline",
			"line continuation",
			"comment",
			"eof",
			"sqstr",
			"dqstr",
			"sq here string",
			"dq here string",
			"(",
			")",
			"{",
			"}",
			"[",
			"]",
			"@(",
			"@{",
			"$(",
			";",
			"&&",
			"||",
			"&",
			"|",
			",",
			"--",
			"++",
			"..",
			"::",
			".",
			"!",
			"*",
			"/",
			"%",
			"+",
			"-",
			"=",
			"+=",
			"-=",
			"*=",
			"/=",
			"%=",
			"redirection",
			"<",
			"-f",
			"-not",
			"-bnot",
			"-and",
			"-or",
			"-xor",
			"-band",
			"-bor",
			"-bxor",
			"-join",
			"-eq",
			"-ne",
			"-ge",
			"-gt",
			"-lt",
			"-le",
			"-ilike",
			"-inotlike",
			"-imatch",
			"-inotmatch",
			"-ireplace",
			"-icontains",
			"-inotcontains",
			"-iin",
			"-inotin",
			"-isplit",
			"-ceq",
			"-cne",
			"-cge",
			"-cgt",
			"-clt",
			"-cle",
			"-clike",
			"-cnotlike",
			"-cmatch",
			"-cnotmatch",
			"-creplace",
			"-ccontains",
			"-cnotcontains",
			"-cin",
			"-cnotin",
			"-csplit",
			"-is",
			"-isnot",
			"-as",
			"++",
			"--",
			"-shl",
			"-shr",
			":",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"begin",
			"break",
			"catch",
			"class",
			"continue",
			"data",
			"define",
			"do",
			"dynamicparam",
			"else",
			"elseif",
			"end",
			"exit",
			"filter",
			"finally",
			"for",
			"foreach",
			"from",
			"function",
			"if",
			"in",
			"param",
			"process",
			"return",
			"switch",
			"throw",
			"trap",
			"try",
			"until",
			"using",
			"var",
			"while",
			"workflow",
			"parallel",
			"sequence",
			"inlinescript",
			"configuration",
			"<dynamic keyword>",
			"public",
			"private",
			"static",
			"interface",
			"enum",
			"namespace",
			"module",
			"type",
			"assembly",
			"command",
			"hidden",
			"base"
		};
	}
}
