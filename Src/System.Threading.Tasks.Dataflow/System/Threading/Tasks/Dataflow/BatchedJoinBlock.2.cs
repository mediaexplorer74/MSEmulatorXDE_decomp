using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading.Tasks.Dataflow.Internal;

namespace System.Threading.Tasks.Dataflow
{
	/// <summary>Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.</summary>
	/// <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
	/// <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
	/// <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
	// Token: 0x02000043 RID: 67
	[DebuggerDisplay("{DebuggerDisplayContent,nq}")]
	[DebuggerTypeProxy(typeof(BatchedJoinBlock<, , >.DebugView))]
	public sealed class BatchedJoinBlock<T1, T2, T3> : IReceivableSourceBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>>, ISourceBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>>, IDataflowBlock, IDebuggerDisplay
	{
		/// <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> with the specified configuration.</summary>
		/// <param name="batchSize">The number of items to group into a batch.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
		// Token: 0x060001C3 RID: 451 RVA: 0x000071EC File Offset: 0x000053EC
		public BatchedJoinBlock(int batchSize) : this(batchSize, GroupingDataflowBlockOptions.Default)
		{
		}

		/// <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> with the specified configuration.</summary>
		/// <param name="batchSize">The number of items to group into a batch.</param>
		/// <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
		// Token: 0x060001C4 RID: 452 RVA: 0x000071FC File Offset: 0x000053FC
		public BatchedJoinBlock(int batchSize, GroupingDataflowBlockOptions dataflowBlockOptions)
		{
			if (batchSize < 1)
			{
				throw new ArgumentOutOfRangeException("batchSize", SR.ArgumentOutOfRange_GenericPositive);
			}
			if (dataflowBlockOptions == null)
			{
				throw new ArgumentNullException("dataflowBlockOptions");
			}
			if (!dataflowBlockOptions.Greedy || dataflowBlockOptions.BoundedCapacity != -1)
			{
				throw new ArgumentException(SR.Argument_NonGreedyNotSupported, "dataflowBlockOptions");
			}
			this._batchSize = batchSize;
			dataflowBlockOptions = dataflowBlockOptions.DefaultOrClone();
			this._source = new SourceCore<Tuple<IList<T1>, IList<T2>, IList<T3>>>(this, dataflowBlockOptions, delegate(ISourceBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>> owningSource)
			{
				((BatchedJoinBlock<T1, T2, T3>)owningSource).CompleteEachTarget();
			}, null, null);
			Action createBatchAction = delegate()
			{
				if (this._target1.Count > 0 || this._target2.Count > 0 || this._target3.Count > 0)
				{
					this._source.AddMessage(Tuple.Create<IList<T1>, IList<T2>, IList<T3>>(this._target1.GetAndEmptyMessages(), this._target2.GetAndEmptyMessages(), this._target3.GetAndEmptyMessages()));
				}
			};
			this._sharedResources = new BatchedJoinBlockTargetSharedResources(batchSize, dataflowBlockOptions, createBatchAction, delegate()
			{
				createBatchAction();
				this._source.Complete();
			}, new Action<Exception>(this._source.AddException), new Action(this.Complete));
			this._target1 = new BatchedJoinBlockTarget<T1>(this._sharedResources);
			this._target2 = new BatchedJoinBlockTarget<T2>(this._sharedResources);
			this._target3 = new BatchedJoinBlockTarget<T3>(this._sharedResources);
			this._source.Completion.ContinueWith(delegate(Task completed, object state)
			{
				IDataflowBlock dataflowBlock = (BatchedJoinBlock<T1, T2, T3>)state;
				dataflowBlock.Fault(completed.Exception);
			}, this, CancellationToken.None, Common.GetContinuationOptions(TaskContinuationOptions.None) | TaskContinuationOptions.OnlyOnFaulted, TaskScheduler.Default);
			Common.WireCancellationToComplete(dataflowBlockOptions.CancellationToken, this._source.Completion, delegate(object state)
			{
				((BatchedJoinBlock<T1, T2, T3>)state).CompleteEachTarget();
			}, this);
			DataflowEtwProvider log = DataflowEtwProvider.Log;
			if (log.IsEnabled())
			{
				log.DataflowBlockCreated(this, dataflowBlockOptions);
			}
		}

		/// <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />.</summary>
		/// <returns>The batch size.</returns>
		// Token: 0x1700008B RID: 139
		// (get) Token: 0x060001C5 RID: 453 RVA: 0x000073B1 File Offset: 0x000055B1
		public int BatchSize
		{
			get
			{
				return this._batchSize;
			}
		}

		/// <summary>Gets a target that may be used to offer messages of the first type.</summary>
		/// <returns>The target.</returns>
		// Token: 0x1700008C RID: 140
		// (get) Token: 0x060001C6 RID: 454 RVA: 0x000073B9 File Offset: 0x000055B9
		public ITargetBlock<T1> Target1
		{
			get
			{
				return this._target1;
			}
		}

		/// <summary>Gets a target that may be used to offer messages of the second type.</summary>
		/// <returns>The target.</returns>
		// Token: 0x1700008D RID: 141
		// (get) Token: 0x060001C7 RID: 455 RVA: 0x000073C1 File Offset: 0x000055C1
		public ITargetBlock<T2> Target2
		{
			get
			{
				return this._target2;
			}
		}

		/// <summary>Gets a target that may be used to offer messages of the third type.</summary>
		/// <returns>The target.</returns>
		// Token: 0x1700008E RID: 142
		// (get) Token: 0x060001C8 RID: 456 RVA: 0x000073C9 File Offset: 0x000055C9
		public ITargetBlock<T3> Target3
		{
			get
			{
				return this._target3;
			}
		}

		/// <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
		/// <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
		/// <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
		/// <param name="linkOptions">true if the source should unlink from the target after successfully propagating a single message; false to remain connected even after a single message has been propagated.</param>
		/// <exception cref="T:System.ArgumentNullException">
		///   <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
		// Token: 0x060001C9 RID: 457 RVA: 0x000073D1 File Offset: 0x000055D1
		public IDisposable LinkTo(ITargetBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>> target, DataflowLinkOptions linkOptions)
		{
			return this._source.LinkTo(target, linkOptions);
		}

		/// <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
		/// <returns>true if an item could be received; otherwise, false.</returns>
		/// <param name="filter">The predicate a value must successfully pass in order for it to be received. <paramref name="filter" /> may be null in which case all items will pass.</param>
		/// <param name="item">The item received from the source.</param>
		// Token: 0x060001CA RID: 458 RVA: 0x000073E0 File Offset: 0x000055E0
		public bool TryReceive(Predicate<Tuple<IList<T1>, IList<T2>, IList<T3>>> filter, out Tuple<IList<T1>, IList<T2>, IList<T3>> item)
		{
			return this._source.TryReceive(filter, out item);
		}

		/// <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
		/// <returns>true if one or more items could be received; otherwise, false.</returns>
		/// <param name="items">The items received from the source.</param>
		// Token: 0x060001CB RID: 459 RVA: 0x000073EF File Offset: 0x000055EF
		public bool TryReceiveAll(out IList<Tuple<IList<T1>, IList<T2>, IList<T3>>> items)
		{
			return this._source.TryReceiveAll(out items);
		}

		/// <summary>Gets the number of output items available to be received from this block.</summary>
		/// <returns>The number of output items.</returns>
		// Token: 0x1700008F RID: 143
		// (get) Token: 0x060001CC RID: 460 RVA: 0x000073FD File Offset: 0x000055FD
		public int OutputCount
		{
			get
			{
				return this._source.OutputCount;
			}
		}

		/// <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
		/// <returns>The task.</returns>
		// Token: 0x17000090 RID: 144
		// (get) Token: 0x060001CD RID: 461 RVA: 0x0000740A File Offset: 0x0000560A
		public Task Completion
		{
			get
			{
				return this._source.Completion;
			}
		}

		/// <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
		// Token: 0x060001CE RID: 462 RVA: 0x00007417 File Offset: 0x00005617
		public void Complete()
		{
			this._target1.Complete();
			this._target2.Complete();
			this._target3.Complete();
		}

		/// <summary>Causes the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> to complete in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
		/// <param name="exception">The <see cref="T:System.Exception" /> that caused the faulting.</param>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> is null.</exception>
		// Token: 0x060001CF RID: 463 RVA: 0x0000743C File Offset: 0x0000563C
		void IDataflowBlock.Fault(Exception exception)
		{
			if (exception == null)
			{
				throw new ArgumentNullException("exception");
			}
			object incomingLock = this._sharedResources._incomingLock;
			lock (incomingLock)
			{
				if (!this._sharedResources._decliningPermanently)
				{
					this._source.AddException(exception);
				}
			}
			this.Complete();
		}

		// Token: 0x060001D0 RID: 464 RVA: 0x000074A8 File Offset: 0x000056A8
		Tuple<IList<T1>, IList<T2>, IList<T3>> ISourceBlock<Tuple<IList<!0>, IList<!1>, IList<!2>>>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>> target, out bool messageConsumed)
		{
			return this._source.ConsumeMessage(messageHeader, target, out messageConsumed);
		}

		// Token: 0x060001D1 RID: 465 RVA: 0x000074B8 File Offset: 0x000056B8
		bool ISourceBlock<Tuple<IList<!0>, IList<!1>, IList<!2>>>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>> target)
		{
			return this._source.ReserveMessage(messageHeader, target);
		}

		// Token: 0x060001D2 RID: 466 RVA: 0x000074C7 File Offset: 0x000056C7
		void ISourceBlock<Tuple<IList<!0>, IList<!1>, IList<!2>>>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>> target)
		{
			this._source.ReleaseReservation(messageHeader, target);
		}

		// Token: 0x060001D3 RID: 467 RVA: 0x00007417 File Offset: 0x00005617
		private void CompleteEachTarget()
		{
			this._target1.Complete();
			this._target2.Complete();
			this._target3.Complete();
		}

		// Token: 0x17000091 RID: 145
		// (get) Token: 0x060001D4 RID: 468 RVA: 0x000074D6 File Offset: 0x000056D6
		private int OutputCountForDebugger
		{
			get
			{
				return this._source.GetDebuggingInformation().OutputCount;
			}
		}

		/// <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
		/// <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
		// Token: 0x060001D5 RID: 469 RVA: 0x000074E8 File Offset: 0x000056E8
		public override string ToString()
		{
			return Common.GetNameForDebugger(this, this._source.DataflowBlockOptions);
		}

		// Token: 0x17000092 RID: 146
		// (get) Token: 0x060001D6 RID: 470 RVA: 0x000074FB File Offset: 0x000056FB
		private object DebuggerDisplayContent
		{
			get
			{
				return string.Format("{0}, BatchSize={1}, OutputCount={2}", Common.GetNameForDebugger(this, this._source.DataflowBlockOptions), this.BatchSize, this.OutputCountForDebugger);
			}
		}

		// Token: 0x17000093 RID: 147
		// (get) Token: 0x060001D7 RID: 471 RVA: 0x0000752E File Offset: 0x0000572E
		object IDebuggerDisplay.Content
		{
			get
			{
				return this.DebuggerDisplayContent;
			}
		}

		// Token: 0x040000B8 RID: 184
		private readonly int _batchSize;

		// Token: 0x040000B9 RID: 185
		private readonly BatchedJoinBlockTargetSharedResources _sharedResources;

		// Token: 0x040000BA RID: 186
		private readonly BatchedJoinBlockTarget<T1> _target1;

		// Token: 0x040000BB RID: 187
		private readonly BatchedJoinBlockTarget<T2> _target2;

		// Token: 0x040000BC RID: 188
		private readonly BatchedJoinBlockTarget<T3> _target3;

		// Token: 0x040000BD RID: 189
		private readonly SourceCore<Tuple<IList<T1>, IList<T2>, IList<T3>>> _source;

		// Token: 0x02000044 RID: 68
		private sealed class DebugView
		{
			// Token: 0x060001D9 RID: 473 RVA: 0x000075A0 File Offset: 0x000057A0
			public DebugView(BatchedJoinBlock<T1, T2, T3> batchedJoinBlock)
			{
				this._sourceDebuggingInformation = batchedJoinBlock._source.GetDebuggingInformation();
				this._batchedJoinBlock = batchedJoinBlock;
			}

			// Token: 0x17000094 RID: 148
			// (get) Token: 0x060001DA RID: 474 RVA: 0x000075C0 File Offset: 0x000057C0
			public IEnumerable<Tuple<IList<T1>, IList<T2>, IList<T3>>> OutputQueue
			{
				get
				{
					return this._sourceDebuggingInformation.OutputQueue;
				}
			}

			// Token: 0x17000095 RID: 149
			// (get) Token: 0x060001DB RID: 475 RVA: 0x000075CD File Offset: 0x000057CD
			public long BatchesCreated
			{
				get
				{
					return this._batchedJoinBlock._sharedResources._batchesCreated;
				}
			}

			// Token: 0x17000096 RID: 150
			// (get) Token: 0x060001DC RID: 476 RVA: 0x000075DF File Offset: 0x000057DF
			public int RemainingItemsForBatch
			{
				get
				{
					return this._batchedJoinBlock._sharedResources._remainingItemsInBatch;
				}
			}

			// Token: 0x17000097 RID: 151
			// (get) Token: 0x060001DD RID: 477 RVA: 0x000075F1 File Offset: 0x000057F1
			public int BatchSize
			{
				get
				{
					return this._batchedJoinBlock._batchSize;
				}
			}

			// Token: 0x17000098 RID: 152
			// (get) Token: 0x060001DE RID: 478 RVA: 0x000075FE File Offset: 0x000057FE
			public ITargetBlock<T1> Target1
			{
				get
				{
					return this._batchedJoinBlock._target1;
				}
			}

			// Token: 0x17000099 RID: 153
			// (get) Token: 0x060001DF RID: 479 RVA: 0x0000760B File Offset: 0x0000580B
			public ITargetBlock<T2> Target2
			{
				get
				{
					return this._batchedJoinBlock._target2;
				}
			}

			// Token: 0x1700009A RID: 154
			// (get) Token: 0x060001E0 RID: 480 RVA: 0x00007618 File Offset: 0x00005818
			public ITargetBlock<T3> Target3
			{
				get
				{
					return this._batchedJoinBlock._target3;
				}
			}

			// Token: 0x1700009B RID: 155
			// (get) Token: 0x060001E1 RID: 481 RVA: 0x00007625 File Offset: 0x00005825
			public Task TaskForOutputProcessing
			{
				get
				{
					return this._sourceDebuggingInformation.TaskForOutputProcessing;
				}
			}

			// Token: 0x1700009C RID: 156
			// (get) Token: 0x060001E2 RID: 482 RVA: 0x00007632 File Offset: 0x00005832
			public GroupingDataflowBlockOptions DataflowBlockOptions
			{
				get
				{
					return (GroupingDataflowBlockOptions)this._sourceDebuggingInformation.DataflowBlockOptions;
				}
			}

			// Token: 0x1700009D RID: 157
			// (get) Token: 0x060001E3 RID: 483 RVA: 0x00007644 File Offset: 0x00005844
			public bool IsCompleted
			{
				get
				{
					return this._sourceDebuggingInformation.IsCompleted;
				}
			}

			// Token: 0x1700009E RID: 158
			// (get) Token: 0x060001E4 RID: 484 RVA: 0x00007651 File Offset: 0x00005851
			public int Id
			{
				get
				{
					return Common.GetBlockId(this._batchedJoinBlock);
				}
			}

			// Token: 0x1700009F RID: 159
			// (get) Token: 0x060001E5 RID: 485 RVA: 0x0000765E File Offset: 0x0000585E
			public TargetRegistry<Tuple<IList<T1>, IList<T2>, IList<T3>>> LinkedTargets
			{
				get
				{
					return this._sourceDebuggingInformation.LinkedTargets;
				}
			}

			// Token: 0x170000A0 RID: 160
			// (get) Token: 0x060001E6 RID: 486 RVA: 0x0000766B File Offset: 0x0000586B
			public ITargetBlock<Tuple<IList<T1>, IList<T2>, IList<T3>>> NextMessageReservedFor
			{
				get
				{
					return this._sourceDebuggingInformation.NextMessageReservedFor;
				}
			}

			// Token: 0x040000BE RID: 190
			private readonly BatchedJoinBlock<T1, T2, T3> _batchedJoinBlock;

			// Token: 0x040000BF RID: 191
			private readonly SourceCore<Tuple<IList<T1>, IList<T2>, IList<T3>>>.DebuggingInformation _sourceDebuggingInformation;
		}
	}
}
