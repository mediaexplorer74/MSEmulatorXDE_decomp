using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading.Tasks.Dataflow.Internal;

namespace System.Threading.Tasks.Dataflow
{
	/// <summary>Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.</summary>
	/// <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
	/// <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
	// Token: 0x0200003F RID: 63
	[DebuggerDisplay("{DebuggerDisplayContent,nq}")]
	[DebuggerTypeProxy(typeof(BatchedJoinBlock<, >.DebugView))]
	public sealed class BatchedJoinBlock<T1, T2> : IReceivableSourceBlock<Tuple<IList<T1>, IList<T2>>>, ISourceBlock<Tuple<IList<T1>, IList<T2>>>, IDataflowBlock, IDebuggerDisplay
	{
		/// <summary>Initializes a new<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> with the specified configuration.</summary>
		/// <param name="batchSize">The number of items to group into a batch.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
		// Token: 0x0600019A RID: 410 RVA: 0x00006D45 File Offset: 0x00004F45
		public BatchedJoinBlock(int batchSize) : this(batchSize, GroupingDataflowBlockOptions.Default)
		{
		}

		/// <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> with the specified configuration.</summary>
		/// <param name="batchSize">The number of items to group into a batch.</param>
		/// <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
		// Token: 0x0600019B RID: 411 RVA: 0x00006D54 File Offset: 0x00004F54
		public BatchedJoinBlock(int batchSize, GroupingDataflowBlockOptions dataflowBlockOptions)
		{
			if (batchSize < 1)
			{
				throw new ArgumentOutOfRangeException("batchSize", SR.ArgumentOutOfRange_GenericPositive);
			}
			if (dataflowBlockOptions == null)
			{
				throw new ArgumentNullException("dataflowBlockOptions");
			}
			if (!dataflowBlockOptions.Greedy)
			{
				throw new ArgumentException(SR.Argument_NonGreedyNotSupported, "dataflowBlockOptions");
			}
			if (dataflowBlockOptions.BoundedCapacity != -1)
			{
				throw new ArgumentException(SR.Argument_BoundedCapacityNotSupported, "dataflowBlockOptions");
			}
			this._batchSize = batchSize;
			dataflowBlockOptions = dataflowBlockOptions.DefaultOrClone();
			this._source = new SourceCore<Tuple<IList<T1>, IList<T2>>>(this, dataflowBlockOptions, delegate(ISourceBlock<Tuple<IList<T1>, IList<T2>>> owningSource)
			{
				((BatchedJoinBlock<T1, T2>)owningSource).CompleteEachTarget();
			}, null, null);
			Action createBatchAction = delegate()
			{
				if (this._target1.Count > 0 || this._target2.Count > 0)
				{
					this._source.AddMessage(Tuple.Create<IList<T1>, IList<T2>>(this._target1.GetAndEmptyMessages(), this._target2.GetAndEmptyMessages()));
				}
			};
			this._sharedResources = new BatchedJoinBlockTargetSharedResources(batchSize, dataflowBlockOptions, createBatchAction, delegate()
			{
				createBatchAction();
				this._source.Complete();
			}, new Action<Exception>(this._source.AddException), new Action(this.Complete));
			this._target1 = new BatchedJoinBlockTarget<T1>(this._sharedResources);
			this._target2 = new BatchedJoinBlockTarget<T2>(this._sharedResources);
			this._source.Completion.ContinueWith(delegate(Task completed, object state)
			{
				IDataflowBlock dataflowBlock = (BatchedJoinBlock<T1, T2>)state;
				dataflowBlock.Fault(completed.Exception);
			}, this, CancellationToken.None, Common.GetContinuationOptions(TaskContinuationOptions.None) | TaskContinuationOptions.OnlyOnFaulted, TaskScheduler.Default);
			Common.WireCancellationToComplete(dataflowBlockOptions.CancellationToken, this._source.Completion, delegate(object state)
			{
				((BatchedJoinBlock<T1, T2>)state).CompleteEachTarget();
			}, this);
			DataflowEtwProvider log = DataflowEtwProvider.Log;
			if (log.IsEnabled())
			{
				log.DataflowBlockCreated(this, dataflowBlockOptions);
			}
		}

		/// <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</summary>
		/// <returns>The batch size.</returns>
		// Token: 0x17000077 RID: 119
		// (get) Token: 0x0600019C RID: 412 RVA: 0x00006F08 File Offset: 0x00005108
		public int BatchSize
		{
			get
			{
				return this._batchSize;
			}
		}

		/// <summary>Gets a target that may be used to offer messages of the first type.</summary>
		/// <returns>The target.</returns>
		// Token: 0x17000078 RID: 120
		// (get) Token: 0x0600019D RID: 413 RVA: 0x00006F10 File Offset: 0x00005110
		public ITargetBlock<T1> Target1
		{
			get
			{
				return this._target1;
			}
		}

		/// <summary>Gets a target that may be used to offer messages of the second type.</summary>
		/// <returns>The target.</returns>
		// Token: 0x17000079 RID: 121
		// (get) Token: 0x0600019E RID: 414 RVA: 0x00006F18 File Offset: 0x00005118
		public ITargetBlock<T2> Target2
		{
			get
			{
				return this._target2;
			}
		}

		/// <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
		/// <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
		/// <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
		/// <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />  instance that configures the link.</param>
		/// <exception cref="T:System.ArgumentNullException">
		///   <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
		// Token: 0x0600019F RID: 415 RVA: 0x00006F20 File Offset: 0x00005120
		public IDisposable LinkTo(ITargetBlock<Tuple<IList<T1>, IList<T2>>> target, DataflowLinkOptions linkOptions)
		{
			return this._source.LinkTo(target, linkOptions);
		}

		/// <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
		/// <returns>true if an item could be received; otherwise, false.</returns>
		/// <param name="filter">The predicate a value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
		/// <param name="item">The item received from the source.</param>
		// Token: 0x060001A0 RID: 416 RVA: 0x00006F2F File Offset: 0x0000512F
		public bool TryReceive(Predicate<Tuple<IList<T1>, IList<T2>>> filter, out Tuple<IList<T1>, IList<T2>> item)
		{
			return this._source.TryReceive(filter, out item);
		}

		/// <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
		/// <returns>true if one or more items could be received; otherwise, false.</returns>
		/// <param name="items">The items received from the source.</param>
		// Token: 0x060001A1 RID: 417 RVA: 0x00006F3E File Offset: 0x0000513E
		public bool TryReceiveAll(out IList<Tuple<IList<T1>, IList<T2>>> items)
		{
			return this._source.TryReceiveAll(out items);
		}

		/// <summary>Gets the number of output items available to be received from this block.</summary>
		/// <returns>The number of output items.</returns>
		// Token: 0x1700007A RID: 122
		// (get) Token: 0x060001A2 RID: 418 RVA: 0x00006F4C File Offset: 0x0000514C
		public int OutputCount
		{
			get
			{
				return this._source.OutputCount;
			}
		}

		/// <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
		/// <returns>The task.</returns>
		// Token: 0x1700007B RID: 123
		// (get) Token: 0x060001A3 RID: 419 RVA: 0x00006F59 File Offset: 0x00005159
		public Task Completion
		{
			get
			{
				return this._source.Completion;
			}
		}

		/// <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
		// Token: 0x060001A4 RID: 420 RVA: 0x00006F66 File Offset: 0x00005166
		public void Complete()
		{
			this._target1.Complete();
			this._target2.Complete();
		}

		/// <summary>Causes the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> to complete in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
		/// <param name="exception">The <see cref="T:System.Exception" /> that caused the faulting.</param>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> is null.</exception>
		// Token: 0x060001A5 RID: 421 RVA: 0x00006F80 File Offset: 0x00005180
		void IDataflowBlock.Fault(Exception exception)
		{
			if (exception == null)
			{
				throw new ArgumentNullException("exception");
			}
			object incomingLock = this._sharedResources._incomingLock;
			lock (incomingLock)
			{
				if (!this._sharedResources._decliningPermanently)
				{
					this._source.AddException(exception);
				}
			}
			this.Complete();
		}

		// Token: 0x060001A6 RID: 422 RVA: 0x00006FEC File Offset: 0x000051EC
		Tuple<IList<T1>, IList<T2>> ISourceBlock<Tuple<IList<!0>, IList<!1>>>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock<Tuple<IList<T1>, IList<T2>>> target, out bool messageConsumed)
		{
			return this._source.ConsumeMessage(messageHeader, target, out messageConsumed);
		}

		// Token: 0x060001A7 RID: 423 RVA: 0x00006FFC File Offset: 0x000051FC
		bool ISourceBlock<Tuple<IList<!0>, IList<!1>>>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock<Tuple<IList<T1>, IList<T2>>> target)
		{
			return this._source.ReserveMessage(messageHeader, target);
		}

		// Token: 0x060001A8 RID: 424 RVA: 0x0000700B File Offset: 0x0000520B
		void ISourceBlock<Tuple<IList<!0>, IList<!1>>>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock<Tuple<IList<T1>, IList<T2>>> target)
		{
			this._source.ReleaseReservation(messageHeader, target);
		}

		// Token: 0x060001A9 RID: 425 RVA: 0x00006F66 File Offset: 0x00005166
		private void CompleteEachTarget()
		{
			this._target1.Complete();
			this._target2.Complete();
		}

		// Token: 0x1700007C RID: 124
		// (get) Token: 0x060001AA RID: 426 RVA: 0x0000701A File Offset: 0x0000521A
		private int OutputCountForDebugger
		{
			get
			{
				return this._source.GetDebuggingInformation().OutputCount;
			}
		}

		/// <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
		/// <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
		// Token: 0x060001AB RID: 427 RVA: 0x0000702C File Offset: 0x0000522C
		public override string ToString()
		{
			return Common.GetNameForDebugger(this, this._source.DataflowBlockOptions);
		}

		// Token: 0x1700007D RID: 125
		// (get) Token: 0x060001AC RID: 428 RVA: 0x0000703F File Offset: 0x0000523F
		private object DebuggerDisplayContent
		{
			get
			{
				return string.Format("{0}, BatchSize={1}, OutputCount={2}", Common.GetNameForDebugger(this, this._source.DataflowBlockOptions), this.BatchSize, this.OutputCountForDebugger);
			}
		}

		// Token: 0x1700007E RID: 126
		// (get) Token: 0x060001AD RID: 429 RVA: 0x00007072 File Offset: 0x00005272
		object IDebuggerDisplay.Content
		{
			get
			{
				return this.DebuggerDisplayContent;
			}
		}

		// Token: 0x040000AB RID: 171
		private readonly int _batchSize;

		// Token: 0x040000AC RID: 172
		private readonly BatchedJoinBlockTargetSharedResources _sharedResources;

		// Token: 0x040000AD RID: 173
		private readonly BatchedJoinBlockTarget<T1> _target1;

		// Token: 0x040000AE RID: 174
		private readonly BatchedJoinBlockTarget<T2> _target2;

		// Token: 0x040000AF RID: 175
		private readonly SourceCore<Tuple<IList<T1>, IList<T2>>> _source;

		// Token: 0x02000040 RID: 64
		private sealed class DebugView
		{
			// Token: 0x060001AF RID: 431 RVA: 0x000070CB File Offset: 0x000052CB
			public DebugView(BatchedJoinBlock<T1, T2> batchedJoinBlock)
			{
				this._batchedJoinBlock = batchedJoinBlock;
				this._sourceDebuggingInformation = batchedJoinBlock._source.GetDebuggingInformation();
			}

			// Token: 0x1700007F RID: 127
			// (get) Token: 0x060001B0 RID: 432 RVA: 0x000070EB File Offset: 0x000052EB
			public IEnumerable<Tuple<IList<T1>, IList<T2>>> OutputQueue
			{
				get
				{
					return this._sourceDebuggingInformation.OutputQueue;
				}
			}

			// Token: 0x17000080 RID: 128
			// (get) Token: 0x060001B1 RID: 433 RVA: 0x000070F8 File Offset: 0x000052F8
			public long BatchesCreated
			{
				get
				{
					return this._batchedJoinBlock._sharedResources._batchesCreated;
				}
			}

			// Token: 0x17000081 RID: 129
			// (get) Token: 0x060001B2 RID: 434 RVA: 0x0000710A File Offset: 0x0000530A
			public int RemainingItemsForBatch
			{
				get
				{
					return this._batchedJoinBlock._sharedResources._remainingItemsInBatch;
				}
			}

			// Token: 0x17000082 RID: 130
			// (get) Token: 0x060001B3 RID: 435 RVA: 0x0000711C File Offset: 0x0000531C
			public int BatchSize
			{
				get
				{
					return this._batchedJoinBlock._batchSize;
				}
			}

			// Token: 0x17000083 RID: 131
			// (get) Token: 0x060001B4 RID: 436 RVA: 0x00007129 File Offset: 0x00005329
			public ITargetBlock<T1> Target1
			{
				get
				{
					return this._batchedJoinBlock._target1;
				}
			}

			// Token: 0x17000084 RID: 132
			// (get) Token: 0x060001B5 RID: 437 RVA: 0x00007136 File Offset: 0x00005336
			public ITargetBlock<T2> Target2
			{
				get
				{
					return this._batchedJoinBlock._target2;
				}
			}

			// Token: 0x17000085 RID: 133
			// (get) Token: 0x060001B6 RID: 438 RVA: 0x00007143 File Offset: 0x00005343
			public Task TaskForOutputProcessing
			{
				get
				{
					return this._sourceDebuggingInformation.TaskForOutputProcessing;
				}
			}

			// Token: 0x17000086 RID: 134
			// (get) Token: 0x060001B7 RID: 439 RVA: 0x00007150 File Offset: 0x00005350
			public GroupingDataflowBlockOptions DataflowBlockOptions
			{
				get
				{
					return (GroupingDataflowBlockOptions)this._sourceDebuggingInformation.DataflowBlockOptions;
				}
			}

			// Token: 0x17000087 RID: 135
			// (get) Token: 0x060001B8 RID: 440 RVA: 0x00007162 File Offset: 0x00005362
			public bool IsCompleted
			{
				get
				{
					return this._sourceDebuggingInformation.IsCompleted;
				}
			}

			// Token: 0x17000088 RID: 136
			// (get) Token: 0x060001B9 RID: 441 RVA: 0x0000716F File Offset: 0x0000536F
			public int Id
			{
				get
				{
					return Common.GetBlockId(this._batchedJoinBlock);
				}
			}

			// Token: 0x17000089 RID: 137
			// (get) Token: 0x060001BA RID: 442 RVA: 0x0000717C File Offset: 0x0000537C
			public TargetRegistry<Tuple<IList<T1>, IList<T2>>> LinkedTargets
			{
				get
				{
					return this._sourceDebuggingInformation.LinkedTargets;
				}
			}

			// Token: 0x1700008A RID: 138
			// (get) Token: 0x060001BB RID: 443 RVA: 0x00007189 File Offset: 0x00005389
			public ITargetBlock<Tuple<IList<T1>, IList<T2>>> NextMessageReservedFor
			{
				get
				{
					return this._sourceDebuggingInformation.NextMessageReservedFor;
				}
			}

			// Token: 0x040000B0 RID: 176
			private readonly BatchedJoinBlock<T1, T2> _batchedJoinBlock;

			// Token: 0x040000B1 RID: 177
			private readonly SourceCore<Tuple<IList<T1>, IList<T2>>>.DebuggingInformation _sourceDebuggingInformation;
		}
	}
}
